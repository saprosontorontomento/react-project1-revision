{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/post-status-filter/index.js","components/post-status-filter/post-status-filter.js","components/post-list-item/index.js","components/post-list-item/post-list-item.js","components/post-list/index.js","components/post-list/post-list.js","components/post-add-form/index.js","components/post-add-form/post-add-form.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","liked","allPosts","className","SearchPanel","props","state","term","onUpdateSearch","bind","e","target","value","this","setState","type","placeholder","onChange","Component","PostStatusFilter","buttons","name","label","map","filter","onFilterSelect","clazz","onClick","PostlistItem","onDelete","onToggleImportant","onToggleLiked","classNames","important","like","PostList","posts","elements","item","id","itemProps","PostAddForm","text","onValueChange","onSubmit","preventDefault","onAdd","App","data","deleteItem","addItem","maxId","index","findIndex","elem","slice","body","newItem","old","changeSetState","items","length","indexOf","visiblePosts","filterPost","searchPost","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ada5114a.chunk.js","sourcesContent":["import AppHeader from './app-header';\r\nexport default AppHeader;","import React from 'react';\r\n\r\nimport './app-header.css';\r\n\r\nconst AppHeader = ({liked, allPosts}) => {\r\n    return (\r\n        <div className=\"app-header d-flex\">\r\n            <h1>Gleb Chursin</h1>\r\n            <h2>{allPosts} записей, из них понравилось {liked}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppHeader;","import SearchPanel from './search-panel';\r\nexport default SearchPanel;","import React, { Component } from 'react';\r\n\r\nimport './search-panel.css';\r\n\r\nexport default class SearchPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        }\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this)\r\n    }\r\n\r\n    onUpdateSearch(e) {\r\n        const term = e.target.value;\r\n        this.setState({term}); // наш state независит от предыдущего. Что ввёл user то мы и вводим на страницу по его запросу\r\n        this.props.onUpdateSearch(term);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input\r\n                className=\"form-control search-input\"\r\n                type=\"text\"\r\n                placeholder=\"Поиск по записям\"\r\n                onChange={this.onUpdateSearch} // функция будет следить за тем, что вводит user и изменять наш state\r\n            />\r\n        )\r\n    }\r\n}","import PostStatusFilter from './post-status-filter';\r\nexport default PostStatusFilter;","import React, { Component } from 'react';\r\n\r\nimport './post-status-filter.css';\r\n\r\nexport default class PostStatusFilter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.buttons = [\r\n            {name: 'all', label: 'Все'},\r\n            {name: 'like', label: 'Понравилось'},\r\n        ]\r\n    }\r\n    render() {\r\n        const buttons = this.buttons.map(({name, label}) => {\r\n            const {filter, onFilterSelect} = this.props\r\n            const active = filter === name;\r\n            const clazz = active ? 'btn-info' : 'btn-outline-secondary' // динамический класс\r\n            return (\r\n                <button \r\n                    key={name} \r\n                    type='button' \r\n                    className={`btn ${clazz}`}\r\n                    onClick={() => onFilterSelect(name)}>{label}</button> // когда будут create btn у нас create on и будет передовать name(уникальный ключ)\r\n            )\r\n        });\r\n        return (\r\n            <div className=\"btn-group\">\r\n                {buttons}\r\n            </div>\r\n        )\r\n    }\r\n}","import PostlistItem from './post-list-item';\r\nexport default PostlistItem;","import React, {Component} from 'react';\r\n\r\nimport './post-list-item.css';\r\n\r\nexport default class PostlistItem extends Component {\r\n\r\n    render() {\r\n        const {label, onDelete, onToggleImportant, onToggleLiked, important, like} = this.props; // берём props из верхнего global state\r\n        let classNames = 'app-list-item d-flex justify-content-between';\r\n        \r\n        if (important) {\r\n            classNames += ' important';\r\n        }\r\n\r\n        if (like) {\r\n            classNames += ' like';\r\n        }\r\n\r\n        return (\r\n            <div className={classNames}>\r\n                <span \r\n                    className=\"app-list-item-label\"\r\n                    onClick={onToggleLiked}>\r\n                      {label}\r\n                </span>\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <button \r\n                    type=\"button\" \r\n                    className=\"btn-star btn-sm\"\r\n                    onClick={onToggleImportant}>\r\n                        <i className=\"fa fa-star\"></i>\r\n                    </button>\r\n                    <button \r\n                    type=\"button\" \r\n                    className=\"btn-trash btn-sm\"\r\n                    onClick={onDelete}>\r\n                        <i className=\"fa fa-trash-o\"></i>\r\n                    </button>\r\n                    <i className=\"fa fa-heart\"></i>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import PostList from './post-list';\r\nexport default PostList;","import React from 'react';\r\n\r\nimport PostlistItem from '../post-list-item';\r\nimport './post-list.css';\r\n\r\nconst PostList = ({posts, onDelete, onToggleImportant, onToggleLiked}) => {\r\n\r\n    const elements = posts.map((item) => {\r\n        const {id, ...itemProps} = item;\r\n        return (\r\n            <li key={id} className='list-group-item'>\r\n                 <PostlistItem \r\n                    {...itemProps}\r\n                    onDelete={() => onDelete(id)}\r\n                    onToggleImportant={() => onToggleImportant(id)}\r\n                    onToggleLiked={() => onToggleLiked(id)}/>\r\n            </li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <ul className=\"app-list list-group\">\r\n            {elements}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default PostList;","import PostAddForm from './post-add-form';\r\nexport default PostAddForm;","import React, { Component } from 'react';\r\n\r\nimport './post-add-form.css';\r\n\r\nexport default class PostAddForm extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            text: ''\r\n        }\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onValueChange(e) {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.onAdd(this.state.text);\r\n        this.setState({\r\n            text: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form \r\n                className=\"bottom-panel d-flex\"\r\n                onSubmit={this.onSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"О чём вы думаете сейчас?\"\r\n                    className=\"form-control new-post-label\"\r\n                    onChange={this.onValueChange}\r\n                    value={this.state.text} // контролируемый компонент\r\n                />\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-outline-secondary\">\r\n                    Добавить\r\n                    </button>\r\n            </form>\r\n        )\r\n    }\r\n}","import App from './app'\r\nexport default App;","import React, { Component } from 'react';\r\n\r\nimport AppHeader from '../app-header';\r\nimport SearchPanel from '../search-panel';\r\nimport PostStatusFilter from '../post-status-filter';\r\nimport PostList from '../post-list';\r\nimport PostAddForm from '../post-add-form';\r\n\r\nimport './app.css';\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { // глобальный стейт\r\n            data: [\r\n                {label: 'Going to learn React', important: true, like: false, id: 1},\r\n                {label: 'That is so good', important: false, like: false, id: 2},\r\n                {label: 'I need a break...', important: false, like: false, id: 3},\r\n                {label: 'Русский текст', important: false, like: false, id: 4},\r\n                {label: 'Тест фильтра для usera', important: false, like: false, id: 5}\r\n            ],\r\n            term: '',\r\n            filter: 'all' // по умолчанию будет стоять фильтр (кнопка ВСЕ)\r\n        };\r\n\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.onToggleImportant = this.onToggleImportant.bind(this);\r\n        this.onToggleLiked = this.onToggleLiked.bind(this);\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this);\r\n        this.onFilterSelect = this.onFilterSelect.bind(this);\r\n\r\n        this.maxId = 6;\r\n    }\r\n\r\n    deleteItem(id) {\r\n        this.setState(({data}) => {\r\n            const index = data.findIndex(elem => elem.id === id);\r\n\r\n            const newArr = [...data.slice(0, index), ...data.slice(index + 1)];\r\n\r\n            return {\r\n                data: newArr\r\n            }\r\n        });\r\n    }\r\n\r\n    addItem(body) {\r\n        const newItem = {\r\n            label: body,\r\n            important: false,\r\n            id: this.maxId++\r\n        }\r\n        this.setState(({data}) => {\r\n            const newArr = [...data, newItem];\r\n            return {\r\n                data: newArr\r\n            }\r\n        })\r\n    }\r\n\r\n    changeSetState(id, item) {\r\n        this.setState(({data}) => {\r\n            const index = data.findIndex(elem => elem.id === id);\r\n            \r\n            const old = data[index];\r\n            const newItem = {...old, [item]: !old[item]};  // Cвойство, которое идёт за объектом перезапишет свойство старого объекта\r\n\r\n            const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)];\r\n\r\n            return {\r\n                data: newArr\r\n            }\r\n        })\r\n    }\r\n\r\n    onToggleImportant(id) {\r\n        this.changeSetState(id, 'important');\r\n    }\r\n\r\n    onToggleLiked(id) {\r\n        this.changeSetState(id, 'like');\r\n    }\r\n\r\n    searchPost(items, term) {\r\n        if (term.length === 0) {\r\n            return items\r\n        }\r\n\r\n        return items.filter((item) => {\r\n            return item.label.indexOf(term) > -1 // все посты, которые содержат то, что ввёл пользователь\r\n        });\r\n    }\r\n\r\n    filterPost(items, filter) {\r\n        if (filter === 'like') {\r\n            return items.filter(item => item.like)\r\n        } else {\r\n            return items\r\n        }\r\n    }\r\n\r\n    onUpdateSearch(term) {\r\n        this.setState({term})\r\n    }\r\n\r\n    onFilterSelect(filter) {\r\n        this.setState({filter})\r\n    }\r\n\r\n    render() {\r\n        const {data, term, filter} = this.state;\r\n\r\n        const liked = data.filter(item => item.like).length;\r\n        const allPosts = data.length;\r\n\r\n        const visiblePosts = this.filterPost(this.searchPost(data, term), filter);\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <AppHeader\r\n                liked={liked}\r\n                allPosts={allPosts}/>\r\n                <div className=\"search-panel d-flex\">\r\n                    <SearchPanel\r\n                        onUpdateSearch={this.onUpdateSearch} />\r\n                    <PostStatusFilter\r\n                        filter={filter}\r\n                        onFilterSelect={this.onFilterSelect}/>\r\n                </div>\r\n                <PostList \r\n                    posts={visiblePosts} // не берём все данные, а только те, которые хотим отобразить (this.state.data)\r\n                    onDelete={this.deleteItem}\r\n                    onToggleImportant={this.onToggleImportant}\r\n                    onToggleLiked={this.onToggleLiked}/>\r\n                <PostAddForm\r\n                    onAdd={this.addItem} />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}